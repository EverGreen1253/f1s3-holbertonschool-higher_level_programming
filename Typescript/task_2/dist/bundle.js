!function(e){var o={};function t(r){if(o[r])return o[r].exports;var n=o[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,t),n.l=!0,n.exports}t.m=e,t.c=o,t.d=function(e,o,r){t.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,o){if(1&o&&(e=t(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var n in e)t.d(r,n,function(o){return e[o]}.bind(null,n));return r},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},t.p="",t(t.s=0)}([function(e,o){var t=function(){function e(){console.log("Director")}return e.prototype.workFromHome=function(){return"Working from home"},e.prototype.getCoffeeBreak=function(){return"Getting a coffee break"},e.prototype.workDirectorTasks=function(){return"Getting to director tasks"},e}(),r=function(){function e(){console.log("Teacher")}return e.prototype.workFromHome=function(){return"Cannot work from home"},e.prototype.getCoffeeBreak=function(){return"Cannot have a break"},e.prototype.workTeacherTasks=function(){return"Getting to work"},e}();function n(e){return"number"==typeof e&&e<500?new r:new t}function u(e){!function(e){return null!=e.workDirectorTasks}(e)?console.log(e.workTeacherTasks()):console.log(e.workDirectorTasks())}function c(e){return"Math"==e?"Teaching Math":"Teaching History"}console.log(n(200)),console.log(n(1e3)),console.log(n("$500")),u(n(200)),u(n(1e3)),console.log(c("Math")),console.log(c("History"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,